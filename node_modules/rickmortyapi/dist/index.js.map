{
  "version": 3,
  "sources": ["../src/index.ts", "../src/utils/generateQueryString.ts", "../src/utils/get.ts", "../src/utils/getResource.ts", "../src/character/index.ts", "../src/location/index.ts", "../src/episode/index.ts", "../src/endpoints/index.ts"],
  "sourcesContent": ["export { getCharacters, getCharacter } from './character'\nexport { getLocations, getLocation } from './location'\nexport { getEpisodes, getEpisode } from './episode'\nexport { getEndpoints } from './endpoints'\n", "import { GetResource } from './getResource'\n\nexport const errorMessage = {\n  required: 'You are using an invalid argument. As an argument use an integer (Id) or an array of integers (Ids).',\n  optional: 'You are using an invalid argument. As an argument use a filter object or leave it blank.',\n}\n\nconst isInteger = (val: unknown) => typeof val === 'number' && Number.isInteger(val)\n\nexport const isArrayOfIntegers = (val: unknown): boolean => Array.isArray(val) && val.every((item) => isInteger(item))\n\nconst generateQueryString = (query: GetResource['options'], isIdRequired?: boolean): string => {\n  if (isIdRequired && isInteger(query)) {\n    return `/${query}`\n  }\n\n  if (isIdRequired && isArrayOfIntegers(query)) {\n    const arrayOfIds = query as number[]\n\n    /**\n     * [-1] forces the API to return an empty array.\n     * This should be addressed in the next API codebase update.\n     */\n    return `/${arrayOfIds.length ? arrayOfIds : '[-1]'}`\n  }\n\n  if (!isIdRequired && typeof query === 'object' && !Array.isArray(query)) {\n    const params = new URLSearchParams(query as Record<string, string>).toString()\n    return `/?${params}`\n  }\n\n  throw new Error(errorMessage[isIdRequired ? 'required' : 'optional'])\n}\n\nexport default generateQueryString\n", "import https from 'https'\n\nconst BASE_URL = 'https://rickandmortyapi.com/api'\n\nconst get = (endpoint: string): Promise<unknown> => {\n  return new Promise((resolve, reject) => {\n    const url = `${BASE_URL}/${endpoint}`\n\n    https.get(url, (response) => {\n      response.setEncoding('utf8')\n      let body = ''\n\n      response.on('data', (data) => (body += data))\n\n      response.on('error', (error) => reject(error))\n\n      response.on('end', () => {\n        const isStatusOk = response.statusCode && response.statusCode >= 200 && response.statusCode < 300\n        const data = JSON.parse(body)\n\n        resolve({\n          data: isStatusOk ? data : {},\n          status: response.statusCode as number,\n          statusMessage: !isStatusOk && data.error ? data.error : response.statusMessage,\n        })\n      })\n    })\n  })\n}\n\nexport default get\n", "import { CharacterFilter, EpisodeFilter, LocationFilter } from '../interfaces'\nimport generateQueryString from './generateQueryString'\nimport get from './get'\n\nexport interface GetResource {\n  endpoint: 'character' | 'location' | 'episode' | ''\n  options: number | number[] | CharacterFilter | LocationFilter | EpisodeFilter\n  isIdRequired?: boolean\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst getResource = async ({ endpoint, options, isIdRequired = false }: GetResource): Promise<any> => {\n  const qs = generateQueryString(options, isIdRequired)\n\n  return get(`${endpoint}/${qs}`)\n}\n\nexport default getResource\n", "import { ApiResponse, Character, CharacterFilter, Info } from '../interfaces'\nimport getResource from '../utils/getResource'\n\nconst endpoint = 'character'\n\n/**\n * Gets a collection of Characters.<br/>\n * https://rickandmortyapi.com/documentation/#character\n */\nexport const getCharacters = (filters?: CharacterFilter): Promise<ApiResponse<Info<Character[]>>> =>\n  getResource({ endpoint, options: filters ?? {} })\n\n/**\n * Gets a Character by `id` or array of `ids`.<br/>\n * https://rickandmortyapi.com/documentation/#character\n */\nexport const getCharacter = <T extends number | number[]>(\n  id: T,\n): Promise<ApiResponse<T extends number ? Character : Character[]>> =>\n  getResource({ endpoint, options: id, isIdRequired: true })\n", "import { ApiResponse, Info, Location, LocationFilter } from '../interfaces'\nimport getResource from '../utils/getResource'\n\nconst endpoint = 'location'\n\n/**\n * Gets a collection of Locations.<br/>\n * https://rickandmortyapi.com/documentation/#location\n */\nexport const getLocations = (filters?: LocationFilter): Promise<ApiResponse<Info<Location[]>>> =>\n  getResource({ endpoint, options: filters ?? {} })\n\n/**\n * Gets a Location by `id` or array of `ids`.<br/>\n * https://rickandmortyapi.com/documentation/#location\n */\nexport const getLocation = <T extends number | number[]>(\n  id: T,\n): Promise<ApiResponse<T extends number ? Location : Location[]>> =>\n  getResource({ endpoint, options: id, isIdRequired: true })\n", "import { ApiResponse, Episode, EpisodeFilter, Info } from '../interfaces'\nimport getResource from '../utils/getResource'\n\nconst endpoint = 'episode'\n\n/**\n * Gets a collection of Episodes.<br/>\n * https://rickandmortyapi.com/documentation/#episode\n */\nexport const getEpisodes = (filters?: EpisodeFilter): Promise<ApiResponse<Info<Episode[]>>> =>\n  getResource({ endpoint, options: filters ?? {} })\n\n/**\n * Gets an Episode by `id` or array of `ids`.<br/>\n * https://rickandmortyapi.com/documentation/#episode\n */\nexport const getEpisode = <T extends number | number[]>(\n  id: T,\n): Promise<ApiResponse<T extends number ? Episode : Episode[]>> =>\n  getResource({ endpoint, options: id, isIdRequired: true })\n", "import { ApiResponse, Endpoints } from '../interfaces'\nimport getResource from '../utils/getResource'\n\n/**\n * Gets a list of available resources.<br/>\n * https://rickandmortyapi.com/documentation/#rest\n */\nexport const getEndpoints = (): Promise<ApiResponse<Endpoints>> => getResource({ endpoint: '', options: {} })\n"],
  "mappings": "mlBAAA,+ICEO,GAAM,GAAe,CAC1B,SAAU,uGACV,SAAU,4FAGN,EAAY,AAAC,GAAiB,MAAO,IAAQ,UAAY,OAAO,UAAU,GAEnE,EAAoB,AAAC,GAA0B,MAAM,QAAQ,IAAQ,EAAI,MAAM,AAAC,GAAS,EAAU,IAE1G,EAAsB,CAAC,EAA+B,IAAmC,CAC7F,GAAI,GAAgB,EAAU,GAC5B,MAAO,IAAI,IAGb,GAAI,GAAgB,EAAkB,GAAQ,CAC5C,GAAM,GAAa,EAMnB,MAAO,IAAI,EAAW,OAAS,EAAa,SAG9C,GAAI,CAAC,GAAgB,MAAO,IAAU,UAAY,CAAC,MAAM,QAAQ,GAE/D,MAAO,KADQ,GAAI,iBAAgB,GAAiC,aAItE,KAAM,IAAI,OAAM,EAAa,EAAe,WAAa,cAGpD,EAAQ,EClCf,MAAkB,oBAEZ,EAAW,kCAEX,EAAM,AAAC,GACJ,GAAI,SAAQ,CAAC,EAAS,IAAW,CACtC,GAAM,GAAM,GAAG,KAAY,IAE3B,UAAM,IAAI,EAAK,AAAC,GAAa,CAC3B,EAAS,YAAY,QACrB,GAAI,GAAO,GAEX,EAAS,GAAG,OAAQ,AAAC,GAAU,GAAQ,GAEvC,EAAS,GAAG,QAAS,AAAC,GAAU,EAAO,IAEvC,EAAS,GAAG,MAAO,IAAM,CACvB,GAAM,GAAa,EAAS,YAAc,EAAS,YAAc,KAAO,EAAS,WAAa,IACxF,EAAO,KAAK,MAAM,GAExB,EAAQ,CACN,KAAM,EAAa,EAAO,GAC1B,OAAQ,EAAS,WACjB,cAAe,CAAC,GAAc,EAAK,MAAQ,EAAK,MAAQ,EAAS,sBAOpE,EAAQ,ECnBf,GAAM,GAAc,MAAO,CAAE,WAAU,UAAS,eAAe,MAAuC,CACpG,GAAM,GAAK,EAAoB,EAAS,GAExC,MAAO,GAAI,GAAG,KAAY,MAGrB,EAAQ,ECdf,GAAM,GAAW,YAMJ,EAAgB,AAAC,GAC5B,EAAY,CAAE,WAAU,QAAS,UAAW,KAMjC,EAAe,AAC1B,GAEA,EAAY,CAAE,WAAU,QAAS,EAAI,aAAc,KChBrD,GAAM,GAAW,WAMJ,EAAe,AAAC,GAC3B,EAAY,CAAE,WAAU,QAAS,UAAW,KAMjC,EAAc,AACzB,GAEA,EAAY,CAAE,WAAU,QAAS,EAAI,aAAc,KChBrD,GAAM,GAAW,UAMJ,EAAc,AAAC,GAC1B,EAAY,CAAE,WAAU,QAAS,UAAW,KAMjC,EAAa,AACxB,GAEA,EAAY,CAAE,WAAU,QAAS,EAAI,aAAc,KCZ9C,GAAM,GAAe,IAAuC,EAAY,CAAE,SAAU,GAAI,QAAS",
  "names": []
}
